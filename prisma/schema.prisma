generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String?
  email     String?  @unique
  password  String?
  userType  String?  // "BUYER" or "ADMIN"
  createdAt DateTime? @default(now())

  wholesaleBuyer WholesaleBuyer?
  retailBuyer    RetailBuyer?
  purchaseRequests PurchaseRequest[]
  cart      Cart?
}

model WholesaleBuyer  {
  userId         String  @id @default(uuid()) @unique
  taxId          String?
  taxIdFile      String?
  storeName      String?
  companyName    String?
  contactPerson  String?
  officePhone    String?
  cellPhone      String?
  addressLine1   String?
  city           String?
  state          String?
  zipCode        String?
  notes          String?

  user           User @relation(fields: [userId], references: [id])
}

model Product {
  id            String   @id @default(uuid())
  name          String?
  slug          String?
  category      String?
  price         Decimal?
  retailPrice   Decimal? @default(15)
  availability  Boolean? @default(true)
  description   String?
  stockQuantity Int?     @default(0)
  tags          String[]
  images        String[]
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  purchaseRequests PurchaseRequest[]
}

model SiteConfig {
  id               String   @id @default(uuid())
  featuredProducts String[]
  onSaleItems      String[]
  bestSellers      String[]  // Added Best Sellers
  newArrivals      String[]  // Added New Arrivals
  onSale           String[]  // Renamed On Sale for consistency
  updatedAt        DateTime? @updatedAt
}

model PurchaseRequest {
  id         String   @id @default(uuid())
  userId     String?
  productId  String?
  quantity   Int?      @default(1)
  status     String?   // "PENDING", "APPROVED", "REJECTED"
  notes      String?
  createdAt  DateTime? @default(now())

  user       User?     @relation(fields: [userId], references: [id])
  product    Product?  @relation(fields: [productId], references: [id])
}


model Cart {
  id        String    @id @default(uuid())
  userId    String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user      User      @relation(fields: [userId], references: [id])
  items     CartItem[]
}

model CartItem {
  id        String    @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  addedAt   DateTime  @default(now())
  
  cart      Cart      @relation(fields: [cartId], references: [id])
  

  @@unique([cartId, productId])
}


model Blog {
  id          String    @id @default(cuid())
  title       String
  bannerImage String?
  content     String    @db.Text
  category    String[]
  published   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  refLinks    RefLink[]
  tocItems    TocItem[]

  htmlTitle       String? // For <title> tag
  metaDescription String? @db.Text // For meta description
  ogTitle         String? // For Open Graph title
  ogUrl           String? // For Open Graph URL
  ogImage         String? // For Open Graph image
  slug            String? @unique
}

model RefLink {
  id     String @id @default(cuid())
  title  String
  url    String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId String
}

model TocItem {
  id      String @id @default(cuid())
  level   Int
  content String
  slug    String
  blog    Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)
  blogId  String
}

model RetailBuyer {
  userId         String  @id @default(uuid()) @unique
  contactPerson  String?
  cellPhone      String?
  addressLine1   String?
  city           String?
  state          String?
  zipCode        String?
  notes          String?

  user           User @relation(fields: [userId], references: [id])
}